{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"evaluateButtons(x, y, false, slot3)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"2"},"key":"0"},{"code":"evaluateButtons(x, y, false, slot4)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"3"},"key":"1"},{"code":"evaluateButtons(x, y, false, slot5)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"4"},"key":"2"},{"code":"evaluateButtons(x, y, false, slot6)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"5"},"key":"3"},{"code":"evaluateButtons(x, y, false, slot7)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"6"},"key":"4"},{"code":"evaluateButtons(x, y, false, slot8)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"7"},"key":"5"},{"code":"evaluateButtons(x, y, false, slot9)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"8"},"key":"6"},{"code":"evaluateButtons(x, y, false, slot10)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"9"},"key":"7"},{"code":"generateHtml()","filter":{"args":[{"value":"updateTable"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"8"},{"code":"-- unit needs to have 2 filters: timer, start()\n-- for timer filter set its name as updateTable and inside needs to contain generateHtml()\n-- start filter needs to contain all of this code\n\n\nhub = 1075400 --export: This is the total volume of your hub, at present, all hubs need to be the same\ncontainerProficiency = 20 --export: This is the % voume increase of your Container Proficiency talent\ncontainerOptimization = 0 --export: This is the % mass decrease of your Container Optimization talent\n\n\nsortedOres = {}\nores = {}\npures = {}\n\nscreens = {}\ncore = nil\ndatabank = nill\n\nfontBigSize = \"90px\"\nfontSize = \"50px\"\nfontSizeBigMini = \"60px\"\nfontSizeMini = \"40px\"\n\nbarWidth = 290\nbarWidthBig = 450\nbarHeight = 60\nbarHeightBig = 90\nlineGap = 60\nlineGapBig = 90\n\nscreenWidth = 1920\nscreenHeight = 1150\n\nfunction round(number,decimals)\n  local power = 10^decimals\n  return math.floor((number/1000) * power) / power\nend\n\nfunction ContainerMaxVol(hp)\n  if hp > 49 and hp <=123 then vol = hub\n  elseif hp > 123 and hp <= 998 then vol = (1000+(1000*(containerProficiency/100)))\n  elseif hp > 998 and hp <= 7996 then vol = (8000+(8000*(containerProficiency/100)))\n  elseif hp > 7996 and hp <= 17315 then vol = (64000+(64000*(containerProficiency/100)))\n  elseif hp > 17315 then vol = (128000+(128000*(containerProficiency/100)))\n  end\n  return vol\nend\n\nfunction ContainerSelfMass(hp)\n  if hp > 49 and hp <=123 then sm = 0\n  elseif hp > 123 and hp <= 998 then sm = 229.09\n  elseif hp > 998 and hp <= 7996 then sm = 1280\n  elseif hp > 7996 and hp <= 17315 then sm = 7420\n  elseif hp > 17315 then sm = 14840\n  end\n  return sm\nend\n\nfunction addPure(pure)\n  pures[string.lower(\"Pure \"..pure.name)] = pure\nend\n\nfunction addOre(ore)\n  ores[string.lower(ore.name..\" Ore\")] = ore\n  sortedOres[#sortedOres+1] = ore\n  addPure(ore.into)\nend\n\naddPure({name = \"Oxygen\", tier = 1, weight = 1})\naddPure({name = \"Hydrogen\", tier = 1, weight = 0.07})\n\naddOre({name = \"Bauxite\", tier = 1, weight = 1.28, into = {name = \"Aluminium\", weight = 2.65}})\naddOre({name = \"Coal\", tier = 1, weight = 1.35, into = {name = \"Carbon\", weight = 2.27}})\naddOre({name = \"Hematite\", tier = 1, weight = 5.04,  into = {name = \"Iron\", weight = 7.85}})\naddOre({name = \"Quartz\", tier = 1, weight = 2.65,  into = {name = \"Silicon\", weight = 2.33}})\n\naddOre({name = \"Chromite\", tier = 2, weight = 4.54,  into = {name = \"Chromium\", weight = 7.19}})\naddOre({name = \"Malachite\", tier = 2, weight = 4.00,  into = {name = \"Copper\", weight = 8.96}})\naddOre({name = \"Limestone\", tier = 2, weight = 2.71,  into = {name = \"Calcium\", weight = 1.55}})\naddOre({name = \"Natron\", tier = 2, weight = 1.55,  into = {name = \"Sodium\", weight = 0.97}})\n\naddOre({name = \"Garnierite\", tier = 3, weight = 2.60,  into = {name = \"Nickel\", weight = 8.91}})\naddOre({name = \"Petalite\", tier = 3, weight = 2.41,  into = {name = \"Lithium\", weight = 0.53}})\naddOre({name = \"Acanthite\", tier = 3, weight = 7.20,  into = {name = \"Silver\", weight = 10.49}})\naddOre({name = \"Pyrite\", tier = 3, weight = 5.01,  into = {name = \"Sulfur\", weight = 1.82}})\n\naddOre({name = \"Cobaltite\", tier = 4, weight = 6.33,  into = {name = \"Cobalt\", weight = 8.90}})\naddOre({name = \"Cryolite\", tier = 4, weight = 2.95,  into = {name = \"Fluorine\", weight = 1.70}})\naddOre({name = \"Gold nuggets\", tier = 4, weight = 19.30,  into = {name = \"Gold\", weight = 19.30}})\naddOre({name = \"Kolbeckite\", tier = 4, weight = 2.37,  into = {name = \"Scandium\", weight = 2.98}})\n\naddOre({name = \"Rhodonite\", tier = 5, weight = 3.76,  into = {name = \"Manganese\", weight = 7.21}})\naddOre({name = \"Columbite\", tier = 5, weight = 5.38,  into = {name = \"Niobium\", weight = 8.57}})\naddOre({name = \"Illmenite\", tier = 5, weight = 4.55,  into = {name = \"Titanium\", weight = 4.51}})\naddOre({name = \"Vanadinite\", tier = 5, weight = 6.95,  into = {name = \"Vanadium\", weight = 6.0}})\n\n\n\n\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then\n    if value.getElementClass then\n      if value.getElementClass() == \"ScreenUnit\" then\n        screens[#screens + 1] = {screen = value, slot = key, settings = {verticalView = true, generatebackground = true}, button = {x = 0, y = 0, size = 100}, tiers = {}, showTier = -1}\n      elseif value.getElementClass() == \"CoreUnitStatic\" then\n        core = value\n      elseif value.getElementClass() == \"DataBankUnit\" then\n        databank = value\n      end\n    end\n  end\nend\n\nunit.hide()\n\nfunction split(s, delimiter)\n  result = {};\n  for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n    table.insert(result, match);\n  end\n  return result;\nend\n\nif databank then\n  for _,key in ipairs(json.decode(databank.getKeys())) do\n    value = databank.getIntValue(key)\n\n    for _,screenObject in ipairs(screens) do\n      if string.match(key, screenObject.slot) then\n\n        splitted = split(key, \"_\")\n        lastPart = splitted[#splitted]\n\n        if lastPart == \"orent\" then\n          screenObject.settings.verticalView = value == 1\n        elseif lastPart == \"tier\" then\n          system.print(\"recorded tier \"..value)\n          screenObject.showTier = value\n        end\n      end\n    end\n  end\nend\n\n-- Turning on Screens\nfor _,screenObject in ipairs(screens) do\n  screenObject.screen.activate()\nend\n\nfunction displayOff()\n  for _,screenObject in ipairs(screens) do\n    screenObject.screen.clear()\n  end\nend\n\nelementsIds = core.getElementIdList()\n\nfor i = 1, #elementsIds do\n  local name = string.lower(core.getElementNameById(elementsIds[i]))\n  if string.match(core.getElementTypeById(elementsIds[i]), \"ontainer\") and (string.match(name,\" ore\") or string.match(name,\"pure \")) then\n    local got = ores[name]\n    if got == nil then\n      got = pures[name]\n    end\n    if got ~= nil then\n\n      if got.containers == nill then\n        got.containers = {}\n      end\n\n      hitPoints = core.getElementMaxHitPointsById(elementsIds[i])\n\n      got.containers[#got.containers+1] = {id = elementsIds[i], hitPoints = hitPoints, selfMass = ContainerSelfMass(hitPoints), maxVol = ContainerMaxVol(hitPoints)}\n    end\n  end\nend\n\n\nfunction OptimizedContainerMass(mass)\n  oMass = (mass+(mass*(containerOptimization/100)))\n  return oMass\nend\n\nfunction getRGB(percentage)\n  return {(255 * percentage) / 100, (255 * (100 - percentage)) / 100, 0}\nend\n\nfunction rgbToHex(rgb)\n  local hexadecimal = ''\n  for key, value in pairs(rgb) do\n    local hex = ''\n    while(value > 0)do\n      local index = math.floor(math.fmod(value, 16) + 1)\n      value = math.floor(value / 16)\n      hex = string.sub('0123456789ABCDEF', index, index) .. hex\n    end\n    if(string.len(hex) == 0)then\n      hex = '00'\n    elseif(string.len(hex) == 1)then\n      hex = '0' .. hex\n    end\n    hexadecimal = hexadecimal .. hex\n  end\n  return hexadecimal\nend\n\nfunction getHex(percentage)\n  return rgbToHex(getRGB(percentage))\nend\n\n\nfunction barGraphColor(percentage, invert)\n  if percentage == nil then percentage = 0 end\n  if invert then\n    return  getHex( percentage)\n  end\n  return  getHex(100 - percentage)\nend\n\niconStyle = [[\n  <style>\n      text {\n      font-family: arial, candara, refrigerator, calibri;\n      stroke: #464646;\n      fill: #2D2D2D;\n    }  \n\n    .pBar {\n      stroke: #464646; \n      stroke-width: 2;\n      fill: #D4CABD;\n    }  \n    \n    .mainText {\n      font-weight: bold;\n      font-size: ]]..fontSize..[[;\n      fill: #EBEEEE;\n    }      \n    \n    .mainBigText {\n      font-weight: bold;\n      font-size: ]]..fontBigSize..[[;\n      fill: #EBEEEE;\n    }\n    .mainTextRight {\n      text-anchor: end;\n    }  \n    .mainTextMiddle {\n      text-anchor: middle;\n    } \n    \n    .svg-icon path,\n    .svg-icon polygon,\n    .svg-icon rect {\n      fill: #D4CABD;\n    }\n\n    .svg-icon circle {\n      stroke: #D4CABD;\n      stroke-width: 2;\n    }\n  </style>\n]]\n\nfunction generateLine(startingY, startingX, ore, percent, mass, invert, rightSide, textOnTop, generateBackground, single)\n  local line = \"\"\n  local background = \"\"\n\n  if percent > 100 then\n    percent = 100\n  end\n  if percent < 0 then\n    percent = 0\n  end\n\n  if single then\n\n    if textOnTop then\n      if generateBackground then\n        background = [[<text class=\"mainBigText mainTextMiddle\" y=\"]]..(startingY-7)..[[\" x=\"]]..(startingX - barWidthBig/2)..[[\">]]..ore.name..[[</text>]]\n      end\n      startingY = startingY + barHeightBig-1\n    else\n      if generateBackground then\n        if rightSide then\n          background = [[<text class=\"mainBigText\" y=\"]]..(startingY)..[[\" x=\"]]..(startingX)..[[\">]]..ore.name..[[</text>]]\n        else\n          background = [[<text class=\"mainBigText mainTextRight\" y=\"]]..(startingY)..[[\" x=\"]]..(startingX - barWidthBig - 10)..[[\">]]..ore.name..[[</text>]]\n        end\n      end\n    end\n\n  else\n    if textOnTop then\n      if generateBackground then\n        background = [[<text class=\"mainText mainTextMiddle\" y=\"]]..(startingY-7)..[[\" x=\"]]..(startingX - barWidth/2)..[[\">]]..ore.name..[[</text>]]\n      end\n      startingY = startingY + barHeight-1\n    else\n      if generateBackground then\n        if rightSide then\n          background = [[<text class=\"mainText\" y=\"]]..(startingY)..[[\" x=\"]]..(startingX)..[[\">]]..ore.name..[[</text>]]\n        else\n          background = [[<text class=\"mainText mainTextRight\" y=\"]]..(startingY)..[[\" x=\"]]..(startingX - barWidth - 10)..[[\">]]..ore.name..[[</text>]]\n        end\n      end\n    end\n  end\n\n  if generateBackground then\n    if single then\n      background = background..[[<rect class =\"pBar\" x=\"]]..(startingX - barWidthBig -5)..[[\" y=\"]]..(5+(startingY)-barHeightBig)..[[\" height=\"]]..barHeightBig..[[\" width=\"]]..barWidthBig..[[\"/>]]\n    else\n      background = background..[[<rect class =\"pBar\" x=\"]]..(startingX - barWidth -5)..[[\" y=\"]]..(5+(startingY)-barHeight)..[[\" height=\"]]..barHeight..[[\" width=\"]]..barWidth..[[\"/>]]\n    end\n  end\n\n  if single then\n    line = line..[[<rect class =\"pBar\" x=\"]]..(startingX - barWidthBig -5)..[[\" y=\"]]..(5+(startingY)-barHeightBig)..[[\" height=\"]]..barHeightBig..[[\" width=\"]]..(percent * barWidthBig / 100)..[[\" style=\"fill:#]]..barGraphColor(percent, invert)..[[;\"/>]]\n    line = line..[[<text x=\"]]..(startingX-barWidthBig)..[[\" y=\"]]..(startingY-2)..[[\" font-size=\"]]..fontSizeBigMini..[[\">]]..percent..[[%</text>]]\n    line = line..[[<text class = \"thickOutlined\" text-anchor=\"end\" x=\"]]..(startingX - 6)..[[\" y=\"]]..(startingY-2)..[[\" font-size=\"]]..fontSizeBigMini..[[\">]]..mass..[[KL</text>]]\n  else\n    line = line..[[<rect class =\"pBar\" x=\"]]..(startingX - barWidth -5)..[[\" y=\"]]..(5+(startingY)-barHeight)..[[\" height=\"]]..barHeight..[[\" width=\"]]..(percent * barWidth / 100)..[[\" style=\"fill:#]]..barGraphColor(percent, invert)..[[;\"/>]]\n    line = line..[[<text x=\"]]..(startingX-barWidth)..[[\" y=\"]]..(startingY-2)..[[\" font-size=\"]]..fontSizeMini..[[\">]]..percent..[[%</text>]]\n    line = line..[[<text class = \"thickOutlined\" text-anchor=\"end\" x=\"]]..(startingX - 6)..[[\" y=\"]]..(startingY-2)..[[\" font-size=\"]]..fontSizeMini..[[\">]]..mass..[[KL</text>]]\n  end\n  return line, background\nend\n\nfunction evaluateButtons(x, y, pressDown, unit)\n  x = screenWidth * x\n  y = screenHeight * y\n  for _,screenObject in ipairs(screens) do\n    if  screenObject.screen.getId() == unit.getId() then\n      if screenObject.button.x <= x and screenObject.button.x+ screenObject.button.size+100 >= x and screenObject.button.y <= y and screenObject.button.y+ screenObject.button.size+100 >= y and not pressDown then\n        screenObject.settings.verticalView = not screenObject.settings.verticalView\n        if databank then\n          if screenObject.settings.verticalView then\n            databank.setIntValue(screenObject.slot..\"_orent\", 1)\n          else\n            databank.setIntValue(screenObject.slot..\"_orent\", 0)\n          end\n          screenObject.settings.generatebackground = true\n        end\n        generateHtml()\n        break\n      end\n\n      oldTier = screenObject.showTier\n\n\n      if (screenObject.showTier == -1) then\n        for id,tiers in ipairs(screenObject.tiers) do\n          if tiers.x1 <= x and tiers.x2 >= x and tiers.y1 <= y and tiers.y2 >= y and not pressDown then\n            screenObject.showTier = id\n            if databank then\n              databank.setIntValue(screenObject.slot..\"_tier\", id)\n            end\n            break\n          end\n        end\n\n        if screenObject.tiers[0] and screenObject.tiers[0].x1 <= x and screenObject.tiers[0].x2 >= x and screenObject.tiers[0].y1 <= y and screenObject.tiers[0].y2 >= y and not pressDown then\n          screenObject.showTier = 0\n          if databank then\n            databank.setIntValue(screenObject.slot..\"_tier\", 0)\n          end\n        end\n      else\n        if databank then\n          databank.setIntValue(screenObject.slot..\"_tier\", -1)\n        end\n        screenObject.showTier = -1\n      end\n\n      if screenObject.showTier ~= oldTier then\n        screenObject.settings.generatebackground = true\n        generateHtml()\n      end\n\n    end\n  end\nend\n\nfunction getMass(element)\n  mass = 0\n  maxVol = 0\n  for _,container in ipairs(element.containers) do\n    mass = mass+round(math.ceil((OptimizedContainerMass(core.getElementMassById(container.id)) - container.selfMass) / element.weight), 1)\n    maxVol = maxVol + container.maxVol\n  end\n  return mass, maxVol\nend\n\nfunction generateHtml()\n\n  for id,screenObject in ipairs(screens) do\n\n\n    startingY = 0\n\n    if screenObject.settings.verticalView then\n      startingY = -((screenWidth - screenHeight) /2)\n    end\n\n    bhtml = \"\"\n\n    html = \"\"\n    html = html..[[<body >]]\n\n\n    html = html..[[<svg width=\"100vw\" height=\"100vh\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\" xmlns=\"http://www.w3.org/2000/svg\">]]\n\n    if screenObject.settings.verticalView then\n      html = html..[[<g transform=\"rotate(-90 ]]..(screenWidth/2)..[[ ]]..(screenHeight/2)..[[)\">]]\n      if screenObject.settings.generatebackground then\n        bhtml = bhtml..[[<g transform=\"rotate(-90 ]]..(screenWidth/2)..[[ ]]..(screenHeight/2)..[[)\">]]\n      end\n    end\n\n    if screenObject.settings.verticalView then\n\n      if screenObject.settings.generatebackground then\n        bhtml = bhtml..[[<rect fill=\"#2C3735\" id=\"canvas_background\" height=\"]]..screenWidth..[[\" width=\"]]..screenHeight..[[\" y=\"]]..startingY..[[\" x=\"]]..((screenWidth - screenHeight) /2)..[[\"/>]]\n      end\n      startingY =  startingY + 70\n    else\n      if screenObject.settings.generatebackground then\n        bhtml = bhtml..[[<rect fill=\"#2C3735\" id=\"canvas_background\" height=\"]]..screenHeight..[[\" width=\"]]..screenWidth..[[\" y=\"0\" x=\"0\"/>]]\n      end\n    end\n\n\n    single = screenObject.showTier ~= -1\n\n    line = 1\n\n    textOnTop = not screenObject.settings.verticalView and not single or screenObject.settings.verticalView and single\n\n\n    if single then\n      startingY = screenHeight/2\n    end\n\n    if screenObject.showTier == -1 or screenObject.showTier == 0 then\n      oxygen = pures[string.lower(\"Pure Oxygen\")]\n\n      if oxygen.containers ~= nil then\n        local pure = oxygen\n        massPure, maxVol = getMass(pure)\n        percentPure = math.ceil(((math.ceil((massPure * 1000) - 0.5) / maxVol)*100))\n\n\n\n        mainhtml, backc = generateLine(startingY + lineGap, screenWidth/2, pure, percentPure, massPure, true, false, single, screenObject.settings.generatebackground, single)\n        html = html..mainhtml\n\n        bhtml = bhtml..backc\n\n        if screenObject.settings.generatebackground then\n          screenObject.tiers[0] = {x1 = screenWidth/2 - (barWidth* 1.3), x2 = screenWidth/2 + (barWidth* 1.3), y1 = startingY -5, y2 = startingY + barHeight}\n        end\n      end\n\n      hydrogen = pures[string.lower(\"Pure Hydrogen\")]\n      if hydrogen.containers ~= nil then\n        local pure = hydrogen\n        massPure, maxVol = getMass(pure)\n        percentPure = math.ceil(((math.ceil((massPure * 1000) - 0.5) / maxVol)*100))\n\n\n        centerPoint = screenWidth/2+barWidth+10\n        if single then\n          centerPoint = screenWidth/2+barWidthBig+10\n        end\n\n        mainhtml, backc = generateLine(startingY + lineGap, centerPoint, pure, percentPure, massPure, true, true, single, screenObject.settings.generatebackground, single)\n\n        html = html..mainhtml\n\n        bhtml = bhtml..backc\n\n        if screenObject.settings.generatebackground then\n          screenObject.tiers[0] = {x1 = screenWidth/2 - (barWidth* 1.3), x2 = screenWidth/2 + (barWidth* 1.3), y1 = startingY -5, y2 = startingY + barHeight}\n        end\n      end\n\n      if oxygen ~= nil or hydrogen ~= nill then\n        startingY = startingY + lineGap+20\n      end\n    end\n\n    tier = 0\n\n    centerPoint = -(screenWidth / 6)\n\n    if screenObject.settings.verticalView or single then\n      centerPoint = screenWidth/2\n    end\n\n    if single then\n      if screenObject.settings.verticalView then\n        startingY = screenHeight/2-(barHeightBig*4)\n      else\n        startingY = screenHeight/2-(barHeightBig*2)\n      end\n    end\n\n    originalStartingY = startingY\n\n\n    collumn = 1\n\n    lowestY = 0\n\n\n    for k, ore in pairs(sortedOres) do\n      if (ore.containers ~= nil or ore.into.containers ~= nil) and (screenObject.showTier == -1 or ore.tier == screenObject.showTier) then\n\n\n\n        startingY = startingY + lineGap\n\n        if lowestY < startingY then\n          lowestY = startingY\n        end\n\n\n        if tier ~= ore.tier then\n\n          if not screenObject.settings.verticalView then\n            centerPoint = centerPoint + (screenWidth / 6) * 2\n            if collumn == 4 then\n              collumn = 1\n              centerPoint = screenWidth / 3\n              originalStartingY = lowestY - lineGap + 20\n              startingY = lowestY + 20\n            else\n              startingY = originalStartingY + lineGap\n            end\n          else\n            startingY = startingY + 20\n          end\n\n          startingY = startingY + 50\n\n          if screenObject.settings.generatebackground then\n            if single then\n              centerPoint = screenWidth/2\n              bhtml = bhtml..[[<text text-anchor=\"middle\" class=\"mainBigText\" y=\"]]..(startingY-(barHeightBig*2)-10)..[[\" x=\"]]..(centerPoint)..[[\">Tier ]]..ore.tier..[[</text>]]\n            else\n              bhtml = bhtml..[[<text text-anchor=\"middle\" class=\"mainText\" y=\"]]..(startingY-barHeight-10)..[[\" x=\"]]..(centerPoint)..[[\">Tier ]]..ore.tier..[[</text>]]\n            end\n          end\n\n          if not screenObject.settings.verticalView then\n            startingY = startingY - 10\n          end\n\n\n          if screenObject.settings.generatebackground and not single then\n            screenObject.tiers[ore.tier] = {x1 = centerPoint - (barWidth* 1.3), x2 = centerPoint + (barWidth* 1.3), y1 = startingY - 5}\n            if ore.tier > 1 then\n              screenObject.tiers[ore.tier-1] = {x1 =  screenObject.tiers[ore.tier-1].x1 , x2 = screenObject.tiers[ore.tier-1].x2, y1 =  screenObject.tiers[ore.tier-1].y1, y2 = lowestY}\n            end\n          end\n\n          tier = ore.tier\n          collumn = collumn + 1\n        end\n\n\n        if ore.containers ~= nil then\n\n          if single then\n            centerPoint = screenWidth/2\n          end\n\n          massOre, maxVol = getMass(ore)\n          percentOre = math.ceil((math.ceil((massOre * 1000) - 0.5) / maxVol)*100)\n\n          local mainhtml, back = generateLine(startingY, centerPoint, ore, percentOre, massOre, false, false, textOnTop, screenObject.settings.generatebackground, single)\n\n          html = html..mainhtml\n\n          if screenObject.settings.generatebackground then\n            bhtml = bhtml..back\n          end\n        end\n\n        if ore.into.containers ~= nil then\n\n          local pure = ore.into\n          massPure, maxVol = getMass(pure)\n          percentPure = math.ceil(((math.ceil((massPure * 1000) - 0.5) / maxVol)*100))\n\n          center = centerPoint+barWidth+10\n          if single then\n            center = screenWidth/2 + barWidthBig+10\n          end\n          mainhtml, back = generateLine(startingY,center, pure, percentPure, massPure, false, true, textOnTop, screenObject.settings.generatebackground, single)\n          html = html..mainhtml\n\n          if screenObject.settings.generatebackground then\n            bhtml = bhtml..back\n          end\n\n        end\n        if not screenObject.settings.verticalView then\n          startingY = startingY + lineGap\n        end\n\n        if screenObject.settings.verticalView and single then\n          startingY = startingY + (lineGapBig*1.5)\n        end\n\n\n        line = line + 1\n      end\n    end\n\n\n    --    system.print(\"Hydro \" .. screenObject.tiers[0].x1..\" \"..screenObject.tiers[0].x2..\" \"..screenObject.tiers[0].y1..\" \"..screenObject.tiers[0].y2)\n\n    if screenObject.settings.generatebackground and not single then\n      screenObject.tiers[tier] = {x1 =  screenObject.tiers[tier].x1 , x2 = screenObject.tiers[tier].x2, y1 =  screenObject.tiers[tier].y1, y2 = lowestY}\n      if screenObject.settings.verticalView then\n\n        for id,tiers in ipairs(screenObject.tiers) do\n\n          x1 = screenObject.tiers[id].x1-300\n          x2 = screenObject.tiers[id].x2-300\n          y1 = screenObject.tiers[id].y1+((screenWidth - screenHeight)/2)-(lineGap*2)\n          y2 = screenObject.tiers[id].y2+((screenWidth - screenHeight)/2)-lineGap\n\n          screenObject.tiers[id] = {x1 = y1, x2 = y2, y1 = x1, y2 = x2}\n        end\n\n        if screenObject.tiers[0] then\n          x1 = screenObject.tiers[0].x1-300\n          x2 = screenObject.tiers[0].x2-300\n          y1 = screenObject.tiers[0].y1+((screenWidth - screenHeight)/2)\n          y2 = screenObject.tiers[0].y2+((screenWidth - screenHeight)/2)\n\n          screenObject.tiers[0] = {x1 = y1, x2 = y2, y1 = x1, y2 = x2}\n        end\n      end\n    end\n\n    html = html..[[</g></svg></body>]]\n\n\n    if screenObject.settings.generatebackground then\n\n\n      bhtml = iconStyle..[[<svg width=\"100vw\" height=\"100vh\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\" xmlns=\"http://www.w3.org/2000/svg\">]]..bhtml..[[</g></svg>]]\n\n      if screenObject.backgroundContentId == nill then\n        screenObject.backgroundContentId = screenObject.screen.addContent(0, 0, bhtml)\n      else\n        screenObject.screen.resetContent(screenObject.backgroundContentId, bhtml)\n      end\n      screenObject.settings.generatebackground = false\n    end\n\n\n    if screenObject.oreContentId == nill then\n      screenObject.oreContentId = screenObject.screen.addContent(0, 0, html)\n\n\n\n      html = [[<svg width=\"100vw\" height=\"100vh\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\" xmlns=\"http://www.w3.org/2000/svg\">]]\n      html = html..[[<svg class = \"svg-icon\" x=\"0\" y=\"0\" width=\"]]..screenObject.button.size..[[px\" height=\"]]..screenObject.button.size..[[px\" viewBox=\"0 0 20 20\">\n              <path d=\"M12.319,5.792L8.836,2.328C8.589,2.08,8.269,2.295,8.269,2.573v1.534C8.115,4.091,7.937,4.084,7.783,4.084c-2.592,0-4.7,2.097-4.7,4.676c0,1.749,0.968,3.337,2.528,4.146c0.352,0.194,0.651-0.257,0.424-0.529c-0.415-0.492-0.643-1.118-0.643-1.762c0-1.514,1.261-2.747,2.787-2.747c0.029,0,0.06,0,0.09,0.002v1.632c0,0.335,0.378,0.435,0.568,0.245l3.483-3.464C12.455,6.147,12.455,5.928,12.319,5.792 M8.938,8.67V7.554c0-0.411-0.528-0.377-0.781-0.377c-1.906,0-3.457,1.542-3.457,3.438c0,0.271,0.033,0.542,0.097,0.805C4.149,10.7,3.775,9.762,3.775,8.76c0-2.197,1.798-3.985,4.008-3.985c0.251,0,0.501,0.023,0.744,0.069c0.212,0.039,0.412-0.124,0.412-0.34v-1.1l2.646,2.633L8.938,8.67z M14.389,7.107c-0.34-0.18-0.662,0.244-0.424,0.529c0.416,0.493,0.644,1.118,0.644,1.762c0,1.515-1.272,2.747-2.798,2.747c-0.029,0-0.061,0-0.089-0.002v-1.631c0-0.354-0.382-0.419-0.558-0.246l-3.482,3.465c-0.136,0.136-0.136,0.355,0,0.49l3.482,3.465c0.189,0.186,0.568,0.096,0.568-0.245v-1.533c0.153,0.016,0.331,0.022,0.484,0.022c2.592,0,4.7-2.098,4.7-4.677C16.917,9.506,15.948,7.917,14.389,7.107 M12.217,15.238c-0.251,0-0.501-0.022-0.743-0.069c-0.212-0.039-0.411,0.125-0.411,0.341v1.101l-2.646-2.634l2.646-2.633v1.116c0,0.174,0.126,0.318,0.295,0.343c0.158,0.024,0.318,0.034,0.486,0.034c1.905,0,3.456-1.542,3.456-3.438c0-0.271-0.032-0.541-0.097-0.804c0.648,0.719,1.022,1.659,1.022,2.66C16.226,13.451,14.428,15.238,12.217,15.238\"></path>\n            </svg>]]\n      html = html..[[</svg>]]\n      screenObject.screen.addContent(0, 0, html)\n\n\n    else\n      screenObject.screen.resetContent(screenObject.oreContentId, html)\n    end\n\n  end\nend\nfor _,screenObject in ipairs(screens) do\n  screenObject.screen.clear()\nend\ngenerateHtml()\nunit.setTimer('updateTable', 1)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"9"}],"methods":[],"events":[]}
