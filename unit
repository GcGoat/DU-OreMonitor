-- unit needs to have 2 filters: timer, start()
-- for timer filter set its name as updateTable and inside needs to contain generateHtml(true)
-- start filter needs to contain all of this code


hub = 1075400 --export: This is the total volume of your hub, at present, all hubs need to be the same
containerProficiency = 20 --export: This is the % voume increase of your Container Proficiency talent
containerOptimization = 0 --export: This is the % mass decrease of your Container Optimization talent


sortedOres = {}
ores = {}
pures = {}

screens = {}
core = nil
databank = nill

fontBigSize = "90px"
fontSize = "50px"
fontSizeBigMini = "60px"
fontSizeMini = "40px"

barWidth = 290
barWidthBig = 450
barHeight = 60
barHeightBig = 90
lineGap = 60
lineGapBig = 90

screenWidth = 1920
screenHeight = 1150

function round(number,decimals)
  local power = 10^decimals
  return math.floor((number/1000) * power) / power
end

function ContainerMaxVol(hp)
  if hp > 49 and hp <=123 then vol = hub
  elseif hp > 123 and hp <= 998 then vol = (1000+(1000*(containerProficiency/100)))
  elseif hp > 998 and hp <= 7996 then vol = (8000+(8000*(containerProficiency/100)))
  elseif hp > 7996 and hp <= 17315 then vol = (64000+(64000*(containerProficiency/100)))
  elseif hp > 17315 then vol = (128000+(128000*(containerProficiency/100)))
  end
  return vol
end

function ContainerSelfMass(hp)
  if hp > 49 and hp <=123 then sm = 0
  elseif hp > 123 and hp <= 998 then sm = 229.09
  elseif hp > 998 and hp <= 7996 then sm = 1280
  elseif hp > 7996 and hp <= 17315 then sm = 7420
  elseif hp > 17315 then sm = 14840
  end
  return sm
end

function addPure(pure)
  pures[string.lower("Pure "..pure.name)] = pure
end

function addOre(ore)
  ores[string.lower(ore.name.." Ore")] = ore
  sortedOres[#sortedOres+1] = ore
  addPure(ore.into)
end

addPure({name = "Oxygen", tier = 1, weight = 1})
addPure({name = "Hydrogen", tier = 1, weight = 0.07})

addOre({name = "Bauxite", tier = 1, weight = 1.28, into = {name = "Aluminium", weight = 2.65}})
addOre({name = "Coal", tier = 1, weight = 1.35, into = {name = "Carbon", weight = 2.27}})
addOre({name = "Hematite", tier = 1, weight = 5.04,  into = {name = "Iron", weight = 7.85}})
addOre({name = "Quartz", tier = 1, weight = 2.65,  into = {name = "Silicon", weight = 2.33}})

addOre({name = "Chromite", tier = 2, weight = 4.54,  into = {name = "Chromium", weight = 7.19}})
addOre({name = "Malachite", tier = 2, weight = 4.00,  into = {name = "Copper", weight = 8.96}})
addOre({name = "Limestone", tier = 2, weight = 2.71,  into = {name = "Calcium", weight = 1.55}})
addOre({name = "Natron", tier = 2, weight = 1.55,  into = {name = "Sodium", weight = 0.97}})

addOre({name = "Garnierite", tier = 3, weight = 2.60,  into = {name = "Nickel", weight = 8.91}})
addOre({name = "Petalite", tier = 3, weight = 2.41,  into = {name = "Lithium", weight = 0.53}})
addOre({name = "Acanthite", tier = 3, weight = 7.20,  into = {name = "Silver", weight = 10.49}})
addOre({name = "Pyrite", tier = 3, weight = 5.01,  into = {name = "Sulfur", weight = 1.82}})

addOre({name = "Cobaltite", tier = 4, weight = 6.33,  into = {name = "Cobalt", weight = 8.90}})
addOre({name = "Cryolite", tier = 4, weight = 2.95,  into = {name = "Fluorine", weight = 1.70}})
addOre({name = "Gold nuggets", tier = 4, weight = 19.30,  into = {name = "Gold", weight = 19.30}})
addOre({name = "Kolbeckite", tier = 4, weight = 2.37,  into = {name = "Scandium", weight = 2.98}})

addOre({name = "Rhodonite", tier = 5, weight = 3.76,  into = {name = "Manganese", weight = 7.21}})
addOre({name = "Columbite", tier = 5, weight = 5.38,  into = {name = "Niobium", weight = 8.57}})
addOre({name = "Illmenite", tier = 5, weight = 4.55,  into = {name = "Titanium", weight = 4.51}})
addOre({name = "Vanadinite", tier = 5, weight = 6.95,  into = {name = "Vanadium", weight = 6.0}})





for key, value in pairs(unit) do
  if type(value) == "table" and type(value.export) == "table" then
    if value.getElementClass then
      if value.getElementClass() == "ScreenUnit" then
        screens[#screens + 1] = {screen = value, slot = key, settings = {verticalView = true, renderSettings = false, generatebackground = true, tierSettings = {}},
          settingsButton = {x = 0, y = 0, size = 70},
          button = {x = 400, y = 0, size = 50},
          barColorMode = {x = 100, y = 0, size = 50},
          barBColorMode = {x = 150, y = 0, size = 50},
          barTColorMode = {x = 200, y = 0, size = 50},
          barMColorMode = {x = 250, y = 0, size = 50},
          background = {x = 300, y = 0, size = 50},
          applyToAll = {x = 350, y = 0, size = 50},

          resetButton = {x = screenWidth-160, y = 0, size = 50, sizeY = 150},
          tiers = {},
          showTier = -1}

        for i = -1, 5 do
          screens[#screens].settings.tierSettings[i] = {}
        end
        screens[#screens].settings.tierSettings[-1] = {barTColorMode = 6}


      elseif value.getElementClass() == "CoreUnitStatic" then
        core = value
      elseif value.getElementClass() == "DataBankUnit" then
        databank = value
      end
    end
  end
end

unit.hide()

function split(s, delimiter)
  result = {};
  for match in (s..delimiter):gmatch("(.-)"..delimiter) do
    table.insert(result, match);
  end
  return result;
end

if databank then
  for _,key in ipairs(json.decode(databank.getKeys())) do
    value = databank.getIntValue(key)

    for _,screenObject in ipairs(screens) do
      if string.match(key, screenObject.slot) then

        splitted = split(key, "_")
        lastPart = splitted[#splitted]

        if lastPart == "orent" then
          screenObject.settings.verticalView = value == 1
        elseif lastPart == "tier" then
          screenObject.showTier = value
        end

        if value > -2 then
          for i = -1, 5 do
            if lastPart == "barColorMode"..i then
              screenObject.settings.tierSettings[i].barColorMode = value
            elseif lastPart == "barBColorMode"..i then
              screenObject.settings.tierSettings[i].barBColorMode = value
            elseif lastPart == "barTColorMode"..i then
              screenObject.settings.tierSettings[i].barTColorMode = value
            elseif lastPart == "barMColorMode"..i then
              screenObject.settings.tierSettings[i].barMColorMode = value
            elseif lastPart == "background"..i then
              screenObject.settings.tierSettings[i].background = value
            end
          end
        end
      end
    end
  end
end

-- Turning on Screens
for _,screenObject in ipairs(screens) do
  screenObject.screen.activate()
end

function displayOff()
  for _,screenObject in ipairs(screens) do
    screenObject.screen.clear()
  end
end

elementsIds = core.getElementIdList()

for i = 1, #elementsIds do
  local name = string.lower(core.getElementNameById(elementsIds[i]))
  if string.match(core.getElementTypeById(elementsIds[i]), "ontainer") and (string.match(name," ore") or string.match(name,"pure ")) then
    local got = ores[name]
    if got == nil then
      got = pures[name]
    end
    if got ~= nil then

      if got.containers == nill then
        got.containers = {}
      end

      hitPoints = core.getElementMaxHitPointsById(elementsIds[i])

      got.containers[#got.containers+1] = {id = elementsIds[i], hitPoints = hitPoints, selfMass = ContainerSelfMass(hitPoints), maxVol = ContainerMaxVol(hitPoints)}
    end
  end
end


function OptimizedContainerMass(mass)
  oMass = (mass+(mass*(containerOptimization/100)))
  return oMass
end

function getRGB(percentage)
  return {(255 * percentage) / 100, (255 * (100 - percentage)) / 100, (255 * (100 - percentage)) / 100}
end

function rgbToHex(rgb)
  local hexadecimal = ''
  for key, value in pairs(rgb) do
    local hex = ''
    while(value > 0)do
      local index = math.floor(math.fmod(value, 16) + 1)
      value = math.floor(value / 16)
      hex = string.sub('0123456789ABCDEF', index, index) .. hex
    end
    if(string.len(hex) == 0)then
      hex = '00'
    elseif(string.len(hex) == 1)then
      hex = '0' .. hex
    end
    hexadecimal = hexadecimal .. hex
  end
  return hexadecimal
end

function addBBC(color)
  pbarBackgroundColors[#pbarBackgroundColors+1] = {color = color, border = "464646"}
  pbarBackgroundColors[#pbarBackgroundColors+1] = {color = color, border = "fad47a"}
  pbarBackgroundColors[#pbarBackgroundColors+1] = {color = color, border = "8c9698"}
  pbarBackgroundColors[#pbarBackgroundColors+1] = {color = color, border = "ffffff"}
end
pbarBackgroundColors = {}
addBBC("ffffff")
addBBC("464646")
addBBC("b6dfed")
addBBC("05e4ff")
addBBC("fad47a")
addBBC("8c9698")
addBBC("142027")

function addTC(color)
  pbarTextColors[#pbarTextColors+1] = {color = color, border = "484848"}
  pbarTextColors[#pbarTextColors+1] = {color = color, border = "BFC0C1"}
  pbarTextColors[#pbarTextColors+1] = {color = color}
end
pbarTextColors = {}
addTC("ffffff")
addTC("464646")
addTC("b6dfed")
addTC("05e4ff")
addTC("fad47a")
addTC("8c9698")
addTC("142027")

background = {}
background[#background+1] = {color = "2C3735"}
background[#background+1] = {color = "f3f3f3"}
background[#background+1] = {color = "484848"}
background[#background+1] = {color = "464646"}
background[#background+1] = {color = "b6dfed"}
background[#background+1] = {color = "05e4ff"}
background[#background+1] = {color = "8c9698"}
background[#background+1] = {color = "fad47a"}
background[#background+1] = {color = "142027"}
background[#background+1] = {color = "DE354C"}
background[#background+1] = {color = "932432"}
background[#background+1] = {color = "3C1874"}
background[#background+1] = {color = "283747"}
background[#background+1] = {color = "F3F3F3"}
background[#background+1] = {color = "DCE1E3"}
background[#background+1] = {color = "283747"}
background[#background+1] = {color = "5C5F58"}
background[#background+1] = {color = "266150"}
background[#background+1] = {color = "4F4846"}
background[#background+1] = {color = "12232E"}
background[#background+1] = {color = "FFDF6C"}
background[#background+1] = {color = "202020"}
background[#background+1] = {color = "164A41"}
background[#background+1] = {color = "4D774E"}
background[#background+1] = {color = "9DC88D"}
background[#background+1] = {color = "A3BCB6"}
background[#background+1] = {color = "A28089"}
background[#background+1] = {color = "8458B3"}
background[#background+1] = {color = "ff1e00"}
background[#background+1] = {color = "e8f9fd"}


function getHex(percentage, mode)
  if mode == 1 then
    rgb = {(255 * percentage) / 100, (255 * (100 - percentage)) / 100, 0}
  elseif mode == 2 then
    rgb = {(255 * percentage) / 100, (255 * (100 - percentage)) / 100, (255 * (100 - percentage)) / 100}
  elseif mode == 3 then
    rgb = {(255 * percentage) / 100, (255 * (100 - percentage)) / 100, (255 * percentage) / 100}
  elseif mode == 4 then
    rgb = {0, (255 * (100 - percentage)) / 100, (255 * percentage) / 100}
  elseif mode == 5 then
    rgb = {(255 * percentage) / 100, 0, (255 * percentage) / 100}
  elseif mode == 6 then
    rgb = {(255 * percentage) / 100, 125,0}
  elseif mode == 7 then
    rgb = {125, 125, (255 * percentage) / 100}
    --  elseif mode == 8 then
    --    return "b6dfed"
    --  elseif mode == 9 then
    --    return "05e4ff"
    --  elseif mode == 10 then
    --    return "8c9698"
    --  elseif mode == 11 then
    --    return "fad47a"
    --  elseif mode == 12 then
    --    return "142027"

  elseif #background> mode - 7 then
    return background[mode - 7].color
  else
    rgb = {125, 125, 125}
  end
  return rgbToHex(rgb)
end

function barGraphColor(percentage, invert, mode)
  if percentage == nil then percentage = 0 end
  if invert then
    return  getHex(percentage, mode)
  end
  return  getHex(100 - percentage, mode)
end



function updateStyle(screenObject)

  local iconStyle = [[
  <style>
    text {
      font-family: arial, candara, refrigerator, calibri;
      fill: white;
      stroke: #3a3939;
      stroke-width: 10;
    }  

    .pBar {
      stroke: #464646; 
      stroke-width: 2;
      fill: #D4CABD;
    }  
    
    .mainText {
      font-weight: bold;
      font-size: ]]..fontSize..[[;
      fill: #EBEEEE;
      stroke: #3a3939;
      stroke-width: 2;
    }    
      
    .colorMode {
      font-weight: bold;
      font-size: ]]..fontSize..[[;
      fill: white;
      stroke: #3a3939;
      stroke-width: 10;
      text-anchor: middle;
    } 
    
    .mainBigText {
      font-weight: bold;
      font-size: ]]..fontBigSize..[[;
      fill: #EBEEEE;
    }
    .FSBM {
      font-size: ]]..fontSizeBigMini..[[;
    }
    .FSBME {
      font-size: ]]..fontSizeBigMini..[[;
      text-anchor: end;
    }
    .FSM {
      font-size: ]]..fontSizeMini..[[;
    }
    .FSME {
      font-size: ]]..fontSizeMini..[[;
      text-anchor: end;
    }
    .mainTextRight {
      text-anchor: end;
    }  
    .mainTextMiddle {
      text-anchor: middle;
    } 
    
    .svg-icon path {
      fill: none;
      stroke: #3a3939;
      stroke-width: 0.5;
    }
]]

  bgModes = {}
  bgModes[1] = pbarBackgroundColors[1]
  for i = -1, 5 do
    local settings  = screenObject.settings.tierSettings[i]
    if settings ~= nil and settings.barBColorMode ~= nill then
      bgModes[settings.barBColorMode] = settings
    end
  end


  for key, setting in pairs(bgModes) do
    backGRoundColor = pbarBackgroundColors[key]

    iconStyle = iconStyle..[[
      .bgc]]..key..[[
      {
      fill:#]]..backGRoundColor.color..[[; 
      stroke:#]]..backGRoundColor.border..[[;
      }
    ]]

  end

  btModes = {}
  btModes[1] = pbarTextColors[1]
  for i = -1, 5 do
    local settings  = screenObject.settings.tierSettings[i]
    if settings ~= nil and settings.barTColorMode ~= nill then
      btModes[settings.barTColorMode] = settings
    end
  end
  for key, setting in pairs(btModes) do
    backTextColor = pbarTextColors[key]
    iconStyle = iconStyle..[[
      .bt]]..key..[[
      {
      fill:#]]..backTextColor.color..[[; ]]
    if backTextColor.border ~= nil then
      iconStyle = iconStyle..[[stroke:#]]..backTextColor.border..[[;]]
    else
      iconStyle = iconStyle..[[stroke-width: 0;]]
    end
    iconStyle = iconStyle..[[}
    ]]
  end

  mtModes = {}
  mtModes[1] = pbarTextColors[1]
  for i = -1, 5 do
    local settings  = screenObject.settings.tierSettings[i]
    if settings ~= nil and settings.barMColorMode ~= nill then
      mtModes[settings.barMColorMode] = settings
    end
  end
  for key, setting in pairs(mtModes) do
    backTextColor = pbarTextColors[key]
    iconStyle = iconStyle..[[
      .bmcolor]]..key..[[
      {
      fill:#]]..backTextColor.color..[[; ]]
    if backTextColor.border ~= nil then
      iconStyle = iconStyle..[[stroke:#]]..backTextColor.border..[[;]]
    else
      iconStyle = iconStyle..[[stroke-width: 0;]]
    end
    iconStyle = iconStyle..[[}
    ]]
  end


  screenObject.iconStyle = iconStyle..[[</style>]]
end

function generateLine(startingY, startingX, ore, percent, mass, invert, rightSide, textOnTop, screenObject, single, oretier)
  local line = ""
  local background = ""
  startingX = math.floor(startingX)
  startingY = math.floor(startingY)
  if percent > 100 then
    percent = 100
  end
  if percent < 0 then
    percent = 0
  end

  if screenObject.settings.generatebackground then
    colorMMode = screenObject.settings.tierSettings[oretier].barMColorMode
    if colorMMode == nil then
      colorMMode = screenObject.settings.tierSettings[-1].barMColorMode
    end
    if colorMMode == nil then
      colorMMode = 1
    end
  end

  if single then

    if textOnTop then
      if screenObject.settings.generatebackground then
        background = [[<text class="mainBigText mainTextMiddle bmcolor]]..colorMMode..[[" y="]]..(startingY-7)..[[" x="]]..math.floor(startingX - barWidthBig/2)..[[">]]..ore.name..[[</text>]]
      end
      startingY = startingY + barHeightBig-1
    else
      if screenObject.settings.generatebackground then
        if rightSide then
          background = [[<text class="mainBigText bmcolor]]..colorMMode..[[" y="]]..(startingY)..[[" x="]]..(startingX)..[[">]]..ore.name..[[</text>]]
        else
          background = [[<text class="mainBigText mainTextRight bmcolor]]..colorMMode..[[" y="]]..(startingY)..[[" x="]]..(startingX - barWidthBig - 10)..[[">]]..ore.name..[[</text>]]
        end
      end
    end

  else
    if textOnTop then
      if screenObject.settings.generatebackground then
        background = [[<text class="mainText mainTextMiddle bmcolor]]..colorMMode..[[" y="]]..(startingY-7)..[[" x="]]..math.floor(startingX - barWidth/2)..[[">]]..ore.name..[[</text>]]
      end
      startingY = startingY + barHeight-1
    else
      if screenObject.settings.generatebackground then
        if rightSide then
          background = [[<text class="mainText bmcolor]]..colorMMode..[[" y="]]..(startingY)..[[" x="]]..(startingX)..[[">]]..ore.name..[[</text>]]
        else
          background = [[<text class="mainText mainTextRight bmcolor]]..colorMMode..[[" y="]]..(startingY)..[[" x="]]..(startingX - barWidth - 10)..[[">]]..ore.name..[[</text>]]
        end
      end
    end
  end

  if screenObject.settings.generatebackground then

    colorBMode = screenObject.settings.tierSettings[oretier].barBColorMode
    if colorBMode == nil or colorBMode == -2 then
      colorBMode = screenObject.settings.tierSettings[-1].barBColorMode
    end
    if colorBMode == nil or colorBMode == -2 then
      colorBMode = 1
    end
    if single then
      background = background..[[<rect class ="pBar bgc]]..colorBMode..[[" x="]]..math.floor(startingX - barWidthBig -5)..[[" y="]]..math.floor(5+(startingY)-barHeightBig)..[[" height="]]..barHeightBig..[[" width="]]..barWidthBig..[["/>]]
    else
      background = background..[[<rect class ="pBar bgc]]..colorBMode..[[" x="]]..math.floor(startingX - barWidth -5)..[[" y="]]..math.floor(5+(startingY)-barHeight)..[[" height="]]..barHeight..[[" width="]]..barWidth..[["/>]]
    end
  end

  local colorMode = screenObject.settings.tierSettings[oretier].barColorMode
  if colorMode == nil then
    colorMode = screenObject.settings.tierSettings[-1].barColorMode
  end
  if colorMode == nil then
    colorMode = 1
  end

  colorTMode = screenObject.settings.tierSettings[oretier].barTColorMode
  if colorTMode == nil then
    colorTMode = screenObject.settings.tierSettings[-1].barTColorMode
  end
  if colorTMode == nil then
    colorTMode = 1
  end

  if single then
    if percent > 0 then
      line = line..[[<rect class ="pBar bgc]]..colorBMode..[[" x="]]..math.floor(startingX - barWidthBig -5)..[[" y="]]..math.floor(5+(startingY)-barHeightBig)..[[" height="]]..barHeightBig..[[" width="]]..math.floor(percent * barWidthBig / 100)..[[" style="fill:#]]..barGraphColor(percent, invert, colorMode)..[[;"/>]]
    end
    line = line..[[<text class ="FSBM bt]]..colorTMode..[[" x="]]..math.floor(startingX-barWidthBig)..[[" y="]]..math.floor(startingY-2)..[[">]]..percent..[[%</text>]]
    line = line..[[<text class ="FSBME bt]]..colorTMode..[[" x="]]..math.floor(startingX - 6)..[[" y="]]..math.floor(startingY-2)..[[">]]..mass..[[KL</text>]]
  else
    if percent > 0 then
      line = line..[[<rect class ="pBar bgc]]..colorBMode..[[" x="]]..math.floor(startingX - barWidth -5)..[[" y="]]..math.floor(5+(startingY)-barHeight)..[[" height="]]..barHeight..[[" width="]]..math.floor(percent * barWidth / 100)..[[" style="fill:#]]..barGraphColor(percent, invert, colorMode)..[[;"/>]]
    end
    line = line..[[<text class ="FSM bt]]..colorTMode..[[" x="]]..math.floor(startingX-barWidth)..[[" y="]]..math.floor(startingY-2)..[[">]]..percent..[[%</text>]]
    line = line..[[<text class ="FSME bt]]..colorTMode..[[" x="]]..math.floor(startingX - 6)..[[" y="]]..math.floor(startingY-2)..[[">]]..mass..[[KL</text>]]
  end
  return line, background
end

function save(screenObject)
  if databank then
    for tier = -1, 5 do
      tierSetting = screenObject.settings.tierSettings[tier]
      if (tierSetting.barTColorMode ~= nill)  then
        databank.setIntValue(screenObject.slot.."_barTColorMode"..tier, tierSetting.barTColorMode)
      end

      if (tierSetting.barBColorMode ~= nill)  then
        databank.setIntValue(screenObject.slot.."_barBColorMode"..tier, tierSetting.barBColorMode)
      end

      if (tierSetting.barColorMode ~= nill)  then
        databank.setIntValue(screenObject.slot.."_barColorMode"..tier, tierSetting.barColorMode)
      end

      if (tierSetting.barMColorMode ~= nill)  then
        databank.setIntValue(screenObject.slot.."_barMColorMode"..tier, tierSetting.barMColorMode)
      end

      if (tierSetting.background ~= nill)  then
        databank.setIntValue(screenObject.slot.."_background"..tier, tierSetting.background)
      end
    end


    if screenObject.settings.verticalView then
      databank.setIntValue(screenObject.slot.."_orent", 1)
    else
      databank.setIntValue(screenObject.slot.."_orent", 0)
    end
    if databank then
      databank.setIntValue(screenObject.slot.."_tier", screenObject.showTier)
    end
  end
end

function saveAll()
  if databank then
    databank.clear()
    for _,screenObject in ipairs(screens) do
      save(screenObject)
    end
  end
end

function evaluateButtons(x, y, pressDown, unit)
  x = screenWidth * x
  y = screenHeight * y
  for _,screenObject in ipairs(screens) do
    if  screenObject.screen.getId() == unit.getId() then
      if screenObject.button.x <= x and screenObject.button.x+ screenObject.button.size >= x and screenObject.button.y <= y and screenObject.button.y+ screenObject.button.size >= y and not pressDown then
        screenObject.settings.verticalView = not screenObject.settings.verticalView
        if databank then
          if screenObject.settings.verticalView then
            databank.setIntValue(screenObject.slot.."_orent", 1)
          else
            databank.setIntValue(screenObject.slot.."_orent", 0)
          end
          screenObject.settings.generatebackground = true
        end
        generateHtml(false)
        break
      end


      if screenObject.settingsButton.x <= x and screenObject.settingsButton.x+ screenObject.settingsButton.size >= x and
        screenObject.settingsButton.y <= y and screenObject.settingsButton.y+ screenObject.settingsButton.size >= y and not pressDown then
        screenObject.settings.renderSettings = not screenObject.settings.renderSettings
        screenObject.settings.generatebackground = true
        generateHtml(false)
        break
      end

      if  screenObject.settings.renderSettings then
        if screenObject.barColorMode.x <= x and screenObject.barColorMode.x+ screenObject.barColorMode.size >= x and
          screenObject.barColorMode.y <= y and screenObject.barColorMode.y+ screenObject.barColorMode.size >= y and not pressDown then
          local colorMode = screenObject.settings.tierSettings[screenObject.showTier].barColorMode

          if colorMode == nil then
            colorMode = 2
          else
            colorMode = colorMode + 1
          end

          if colorMode > 7 + #background then
            colorMode = 1
          end

          screenObject.settings.tierSettings[screenObject.showTier].barColorMode = colorMode

          if databank then
            databank.setIntValue(screenObject.slot.."_barColorMode"..screenObject.showTier, colorMode)
            screenObject.settings.generatebackground = true
          end
          generateHtml(false)
          break
        end

        if screenObject.barBColorMode.x <= x and screenObject.barBColorMode.x+ screenObject.barBColorMode.size >= x and
          screenObject.barBColorMode.y <= y and screenObject.barBColorMode.y+ screenObject.barBColorMode.size >= y and not pressDown then
          local colorMode = screenObject.settings.tierSettings[screenObject.showTier].barBColorMode

          if colorMode == nil then
            colorMode = 2
          else
            colorMode = colorMode + 1
          end

          if colorMode > #pbarBackgroundColors then
            colorMode = 1
          end

          screenObject.settings.tierSettings[screenObject.showTier].barBColorMode = colorMode

          if databank then
            databank.setIntValue(screenObject.slot.."_barBColorMode"..screenObject.showTier, colorMode)
            screenObject.settings.generatebackground = true
          end
          generateHtml(false)
          break
        end

        if screenObject.barTColorMode.x <= x and screenObject.barTColorMode.x+ screenObject.barTColorMode.size >= x and
          screenObject.barTColorMode.y <= y and screenObject.barTColorMode.y+ screenObject.barTColorMode.size >= y and not pressDown then
          local colorMode = screenObject.settings.tierSettings[screenObject.showTier].barTColorMode

          if colorMode == nil then
            colorMode = 7
          else
            colorMode = colorMode + 1
          end

          if colorMode > #pbarTextColors then
            colorMode = 1
          end

          screenObject.settings.tierSettings[screenObject.showTier].barTColorMode = colorMode

          if databank then
            databank.setIntValue(screenObject.slot.."_barTColorMode"..screenObject.showTier, colorMode)
            screenObject.settings.generatebackground = true
          end
          generateHtml(false)
          break
        end

        if screenObject.barMColorMode.x <= x and screenObject.barMColorMode.x+ screenObject.barMColorMode.size >= x and
          screenObject.barMColorMode.y <= y and screenObject.barMColorMode.y+ screenObject.barMColorMode.size >= y and not pressDown then
          local colorMode = screenObject.settings.tierSettings[screenObject.showTier].barMColorMode

          if colorMode == nil then
            colorMode = 2
          else
            colorMode = colorMode + 1
          end

          if colorMode > #pbarTextColors then
            colorMode = 1
          end

          screenObject.settings.tierSettings[screenObject.showTier].barMColorMode = colorMode

          if databank then
            databank.setIntValue(screenObject.slot.."_barMColorMode"..screenObject.showTier, colorMode)
            screenObject.settings.generatebackground = true
          end
          generateHtml(false)
          break
        end

        if screenObject.background.x <= x and screenObject.background.x+ screenObject.background.size >= x and
          screenObject.background.y <= y and screenObject.background.y+ screenObject.background.size >= y and not pressDown then
          local colorMode = screenObject.settings.tierSettings[screenObject.showTier].background

          if colorMode == nil then
            colorMode = 2
          else
            colorMode = colorMode + 1
          end

          if colorMode > #background then
            colorMode = 1
          end

          screenObject.settings.tierSettings[screenObject.showTier].background = colorMode

          if databank then
            databank.setIntValue(screenObject.slot.."_background"..screenObject.showTier, colorMode)
            screenObject.settings.generatebackground = true
          end
          generateHtml(false)
          break
        end

        -- Apply To All Screens
        if screenObject.applyToAll.x <= x and screenObject.applyToAll.x+ screenObject.applyToAll.size >= x and
          screenObject.applyToAll.y <= y and screenObject.applyToAll.y+ screenObject.applyToAll.size >= y and not pressDown then

          for id_,screenObject_ in ipairs(screens) do
            if screenObject.screen.getId() ~= screenObject_.screen.getId() then

              screenObject_.settings.tierSettings = {}
              for i = -1, 5 do
                screenObject_.settings.tierSettings[i] = {}
              end
              screenObject_.settings.tierSettings[-1] = {barTColorMode = 6}

              for tier = -1, 5 do
                tierSetting = screenObject.settings.tierSettings[tier]
                if (tierSetting.barTColorMode ~= nill and tierSetting.barTColorMode ~= -2)  then
                  screenObject_.settings.tierSettings[tier].barTColorMode = tierSetting.barTColorMode
                end

                if (tierSetting.barBColorMode ~= nill and tierSetting.barBColorMode ~= -2)  then
                  screenObject_.settings.tierSettings[tier].barBColorMode = tierSetting.barBColorMode
                end

                if (tierSetting.barColorMode ~= nill and tierSetting.barColorMode ~= -2)  then
                  screenObject_.settings.tierSettings[tier].barColorMode = tierSetting.barColorMode
                end

                if (tierSetting.barMColorMode ~= nill and tierSetting.barMColorMode ~= -2)  then
                  screenObject_.settings.tierSettings[tier].barMColorMode = tierSetting.barMColorMode
                end

                if (tierSetting.background ~= nill and tierSetting.background ~= -2)  then
                  screenObject_.settings.tierSettings[tier].background = tierSetting.background
                end
              end


              screenObject_.settings.generatebackground = true
            end
          end

          saveAll()
          generateHtml(false)
          break
        end

        width = screenObject.resetButton.size
        if screenObject.resetButton.sizeY ~= nill then
          width = screenObject.resetButton.sizeY
        end
        if screenObject.resetButton.x <= x and screenObject.resetButton.x+ screenObject.resetButton.size >= x and
          screenObject.resetButton.y <= y and screenObject.resetButton.y+ screenObject.resetButton.width >= y and not pressDown then

          for i = -1, 5 do
            screenObject.settings.tierSettings[i] = {}
          end
          screenObject.settings.tierSettings[-1] = {barTColorMode = 6}

          if databank then

            databank.setIntValue(screenObject.slot.."_barTColorMode"..screenObject.showTier, -2)
            databank.setIntValue(screenObject.slot.."_barBColorMode"..screenObject.showTier, -2)
            databank.setIntValue(screenObject.slot.."_barColorMode"..screenObject.showTier, -2)
            databank.setIntValue(screenObject.slot.."_barMColorMode"..screenObject.showTier, -2)
            databank.setIntValue(screenObject.slot.."_background"..screenObject.showTier, -2)

          end

          screenObject.settings.generatebackground = true
          generateHtml(false)
          break
        end
      end


      oldTier = screenObject.showTier


      if (screenObject.showTier == -1) then
        for id,tiers in ipairs(screenObject.tiers) do
          if tiers.x1 <= x and tiers.x2 >= x and tiers.y1 <= y and tiers.y2 >= y and not pressDown then
            screenObject.showTier = id
            if databank then
              databank.setIntValue(screenObject.slot.."_tier", id)
            end
            break
          end
        end

        if screenObject.tiers[0] and screenObject.tiers[0].x1 <= x and screenObject.tiers[0].x2 >= x and screenObject.tiers[0].y1 <= y and screenObject.tiers[0].y2 >= y and not pressDown then
          screenObject.showTier = 0
          if databank then
            databank.setIntValue(screenObject.slot.."_tier", 0)
          end
        end
      else
        if databank then
          databank.setIntValue(screenObject.slot.."_tier", -1)
        end
        screenObject.showTier = -1
      end

      if screenObject.showTier ~= oldTier then
        screenObject.settings.generatebackground = true
        generateHtml(false)
      end

    end
  end
end

function getMass(element)
  mass = 0
  maxVol = 0
  for _,container in ipairs(element.containers) do
    mass = mass+round(math.ceil((OptimizedContainerMass(core.getElementMassById(container.id)) - container.selfMass) / element.weight), 1)
    maxVol = maxVol + container.maxVol
  end
  return mass, maxVol
end

function optionColorButton(colormode, fill, border, button, y)
  local bhtml = ""
  if fill ~= nil then

    width = button.size
    if button.sizeY ~= nill then
      width = button.sizeY
    end

    bhtml = [[<rect fill="#]]..fill..[[" height="]]..(button.size)..[[" width="]]..(width)..[[" y="]]..(y)..[[" x="]]..(button.x)..[["/>]]
  end
  if border ~= nil then
    bhtml = bhtml..[[<rect fill="#]]..border..[[" height="]]..(button.size)..[[" width="]]..math.floor((width)/2)..[[" y="]]..(y)..[[" x="]]..math.floor(button.x+(button.size*0.5))..[["/>]]
  end
  bhtml = bhtml..[[<text class = "colorMode" x="]]..math.floor(button.x+(width*0.5))..[[" y="]]..math.floor(y+(button.size*0.85))..[[">]]..colormode..[[</text>]]
  return bhtml
end

counter = 0

function generateHtml(auto)

  if auto then
    counter  = counter + 1
  end


  for id,screenObject in ipairs(screens) do

    startingY = 0

    if screenObject.settings.verticalView then
      startingY = -math.floor((screenWidth - screenHeight) /2)
    end

    bhtml = ""

    html = ""
    html = html..[[<body >]]


    html = html..[[<svg width="100vw" height="100vh" viewBox="0 0 ]]..screenWidth..[[ ]]..screenHeight..[[" xmlns="http://www.w3.org/2000/svg">]]


    if screenObject.settings.verticalView then
      html = html..[[<g transform="rotate(-90 ]]..(screenWidth/2)..[[ ]]..(screenHeight/2)..[[)">]]
      if screenObject.settings.generatebackground then
        bhtml = bhtml..[[<g transform="rotate(-90 ]]..(screenWidth/2)..[[ ]]..(screenHeight/2)..[[)">]]
      end
    end

    if screenObject.settings.generatebackground then
      backgroundColor = screenObject.settings.tierSettings[screenObject.showTier].background

      if backgroundColor == nill then
        backgroundColor = screenObject.settings.tierSettings[-1].background
      end
      if backgroundColor ~= nill and backgroundColor ~= -2 then
        backgroundColor = background[backgroundColor]
      end

      if backgroundColor == nill then
        backgroundColor = background[1]
      end
    end

    if screenObject.settings.verticalView then
      if screenObject.settings.generatebackground then
        bhtml = bhtml..[[<rect fill="#]]..backgroundColor.color..[[" height="]]..screenWidth..[[" width="]]..screenHeight..[[" y="]]..startingY..[[" x="]]..((screenWidth - screenHeight) /2)..[["/>]]
      end
      startingY =  startingY + 70
    else
      if screenObject.settings.generatebackground then
        bhtml = bhtml..[[<rect fill="#]]..backgroundColor.color..[[" height="]]..screenHeight..[[" width="]]..screenWidth..[[" y="0" x="0"/>]]
      end
    end




    single = screenObject.showTier ~= -1

    line = 1

    textOnTop = not screenObject.settings.verticalView and not single or screenObject.settings.verticalView and single


    if single then
      startingY = math.floor(screenHeight/2)
    end

    if screenObject.showTier == -1 or screenObject.showTier == 0 then
      oxygen = pures[string.lower("Pure Oxygen")]

      if oxygen.containers ~= nil then
        local pure = oxygen
        massPure, maxVol = getMass(pure)
        percentPure = math.ceil(((math.ceil((massPure * 1000) - 0.5) / maxVol)*100))

        oxyY = startingY + lineGap
        if single then
          if not screenObject.settings.verticalView then
            oxyY = startingY - lineGap
          end
        end

        mainhtml, backc = generateLine(oxyY, screenWidth/2, pure, percentPure, massPure, true, false, single, screenObject, single, 0)
        html = html..mainhtml

        bhtml = bhtml..backc

        if screenObject.settings.generatebackground then
          screenObject.tiers[0] = {x1 = screenWidth/2 - (barWidth* 1.3), x2 = screenWidth/2 + (barWidth* 1.3), y1 = startingY -5, y2 = startingY + barHeight}
        end
      end

      hydrogen = pures[string.lower("Pure Hydrogen")]
      if hydrogen.containers ~= nil then
        local pure = hydrogen
        massPure, maxVol = getMass(pure)
        percentPure = math.ceil(((math.ceil((massPure * 1000) - 0.5) / maxVol)*100))


        centerPoint = screenWidth/2+barWidth+10
        if single then
          centerPoint = screenWidth/2+barWidthBig+10
        end

        oxyY = startingY + lineGap
        if single then
          if not screenObject.settings.verticalView then
            oxyY = startingY - lineGap
          end
        end

        mainhtml, backc = generateLine(oxyY, centerPoint, pure, percentPure, massPure, true, true, single, screenObject, single, 0)

        html = html..mainhtml

        bhtml = bhtml..backc

        if screenObject.settings.generatebackground then
          screenObject.tiers[0] = {x1 = screenWidth/2 - (barWidth* 1.3), x2 = screenWidth/2 + (barWidth* 1.3), y1 = startingY -5, y2 = startingY + barHeight}
        end
      end

      if oxygen ~= nil or hydrogen ~= nill then
        startingY = startingY + lineGap+20
      end
    end

    tier = 0

    centerPoint = -(screenWidth / 6)

    if screenObject.settings.verticalView or single then
      centerPoint = screenWidth/2
    end

    if single then
      if screenObject.settings.verticalView then
        startingY = screenHeight/2-(barHeightBig*4)
      else
        startingY = screenHeight/2-(barHeightBig*2)
      end
    end

    originalStartingY = startingY


    collumn = 1

    lowestY = 0


    for k, ore in pairs(sortedOres) do
      if (ore.containers ~= nil or ore.into.containers ~= nil) and (screenObject.showTier == -1 or ore.tier == screenObject.showTier) then



        startingY = startingY + lineGap

        if lowestY < startingY then
          lowestY = startingY
        end


        if tier ~= ore.tier then

          if not screenObject.settings.verticalView then
            centerPoint = centerPoint + (screenWidth / 6) * 2
            if collumn == 4 then
              collumn = 1
              centerPoint = screenWidth / 3
              originalStartingY = lowestY - lineGap + 20
              startingY = lowestY + 20
            else
              startingY = originalStartingY + lineGap
            end
          else
            startingY = startingY + 20
          end

          startingY = startingY + 50

          if screenObject.settings.generatebackground then

            colorMMode = screenObject.settings.tierSettings[ore.tier].barMColorMode
            if colorMMode == nil then
              colorMMode = screenObject.settings.tierSettings[-1].barMColorMode
            end
            if colorMMode == nil then
              colorMMode = 1
            end


            if single then
              centerPoint = screenWidth/2
              bhtml = bhtml..[[<text text-anchor="middle" class="mainBigText bmcolor]]..colorMMode..[[" y="]]..(startingY-(barHeightBig*2)-10)..[[" x="]]..(centerPoint)..[[">Tier ]]..ore.tier..[[</text>]]
            else
              bhtml = bhtml..[[<text text-anchor="middle" class="mainText bmcolor]]..colorMMode..[[" y="]]..(startingY-barHeight-10)..[[" x="]]..(centerPoint)..[[">Tier ]]..ore.tier..[[</text>]]
            end
          end

          if not screenObject.settings.verticalView then
            startingY = startingY - 10
          end


          if screenObject.settings.generatebackground and not single then
            screenObject.tiers[ore.tier] = {x1 = centerPoint - (barWidth* 1.3), x2 = centerPoint + (barWidth* 1.3), y1 = startingY - 5}
            if ore.tier > 1 and screenObject.tiers[ore.tier-1] ~= nill then
              screenObject.tiers[ore.tier-1] = {x1 =  screenObject.tiers[ore.tier-1].x1 , x2 = screenObject.tiers[ore.tier-1].x2, y1 =  screenObject.tiers[ore.tier-1].y1, y2 = lowestY}
            end
          end

          tier = ore.tier
          collumn = collumn + 1
        end


        if ore.containers ~= nil then

          if single then
            centerPoint = screenWidth/2
          end

          massOre, maxVol = getMass(ore)
          percentOre = math.ceil((math.ceil((massOre * 1000) - 0.5) / maxVol)*100)

          local mainhtml, back = generateLine(startingY, centerPoint, ore, percentOre, massOre, false, false, textOnTop, screenObject, single, tier)

          html = html..mainhtml

          if screenObject.settings.generatebackground then
            bhtml = bhtml..back
          end
        end

        if ore.into.containers ~= nil then

          local pure = ore.into
          massPure, maxVol = getMass(pure)
          percentPure = math.ceil(((math.ceil((massPure * 1000) - 0.5) / maxVol)*100))

          center = centerPoint+barWidth+10
          if single then
            center = screenWidth/2 + barWidthBig+10
          end
          mainhtml, back = generateLine(startingY,center, pure, percentPure, massPure, false, true, textOnTop, screenObject, single, tier)
          html = html..mainhtml

          if screenObject.settings.generatebackground then
            bhtml = bhtml..back
          end

        end
        if not screenObject.settings.verticalView then
          startingY = startingY + lineGap
        end

        if screenObject.settings.verticalView and single then
          startingY = startingY + (lineGapBig*1.5)
        end


        line = line + 1
      end
    end

    if screenObject.settings.generatebackground and not single then
      if screenObject.tiers[tier] ~= nill then
        screenObject.tiers[tier] = {x1 =  screenObject.tiers[tier].x1 , x2 = screenObject.tiers[tier].x2, y1 =  screenObject.tiers[tier].y1, y2 = lowestY}
      end
      if screenObject.settings.verticalView then

        for id,tiers in ipairs(screenObject.tiers) do

          x1 = screenObject.tiers[id].x1-300
          x2 = screenObject.tiers[id].x2-300
          y1 = screenObject.tiers[id].y1+((screenWidth - screenHeight)/2)-(lineGap*2)
          y2 = screenObject.tiers[id].y2+((screenWidth - screenHeight)/2)-lineGap

          screenObject.tiers[id] = {x1 = y1, x2 = y2, y1 = x1, y2 = x2}
        end

        if screenObject.tiers[0] then
          x1 = screenObject.tiers[0].x1-300
          x2 = screenObject.tiers[0].x2-300
          y1 = screenObject.tiers[0].y1+((screenWidth - screenHeight)/2)
          y2 = screenObject.tiers[0].y2+((screenWidth - screenHeight)/2)

          screenObject.tiers[0] = {x1 = y1, x2 = y2, y1 = x1, y2 = x2}
        end
      end
    end

    html = html..[[</g></svg></body>]]


    if screenObject.settings.generatebackground then

      updateStyle(screenObject)

      bhtml = screenObject.iconStyle..[[<svg width="100vw" height="100vh" viewBox="0 0 ]]..screenWidth..[[ ]]..screenHeight..[[" xmlns="http://www.w3.org/2000/svg">]]..bhtml..[[</g></svg>]]

      bhtml = bhtml..[[<svg width="100vw" height="100vh" viewBox="0 0 ]]..screenWidth..[[ ]]..screenHeight..[[" xmlns="http://www.w3.org/2000/svg">]]
      local y = (screenObject.barColorMode.y+(screenObject.barColorMode.size*0.25))


      if  screenObject.settings.renderSettings then

        bhtml = bhtml..[[<rect fill="#585857" fill-opacity="0.7" height="]]..(screenObject.settingsButton.size)..[[" width="]]..(screenObject.settingsButton.size*7-20)..[[" y="0" x="0"/>]]

        local colormode = screenObject.settings.tierSettings[screenObject.showTier].barColorMode
        if colormode== nill then
          colormode = 1
        end

        bhtml = bhtml..optionColorButton(colormode, barGraphColor(0, false, colormode), barGraphColor(100, false, colormode), screenObject.barColorMode, y)

        local bcolormode = screenObject.settings.tierSettings[screenObject.showTier].barBColorMode
        if bcolormode ~= nill then
          colormode = bcolormode
          bcolormode = pbarBackgroundColors[bcolormode]
        end
        if bcolormode == nill then
          colormode = 1
          bcolormode = pbarBackgroundColors[1]
        end

        bhtml = bhtml..optionColorButton(colormode, bcolormode.color, bcolormode.border, screenObject.barBColorMode, y)

        local bcolormode = screenObject.settings.tierSettings[screenObject.showTier].barTColorMode
        if bcolormode ~= nill then
          colormode = bcolormode
          bcolormode = pbarTextColors[bcolormode]
        end
        if bcolormode == nill then
          colormode = 1
          bcolormode = pbarTextColors[1]
        end

        bhtml = bhtml..optionColorButton(colormode, bcolormode.color, bcolormode.border, screenObject.barTColorMode, y)

        local mcolormode = screenObject.settings.tierSettings[screenObject.showTier].barMColorMode
        if mcolormode ~= nill then
          colormode = mcolormode
          mcolormode = pbarTextColors[mcolormode]
        end
        if mcolormode == nill then
          colormode = 1
          mcolormode = pbarTextColors[1]
        end

        bhtml = bhtml..optionColorButton(colormode, mcolormode.color, mcolormode.border, screenObject.barMColorMode, y)

        local bmode = screenObject.settings.tierSettings[screenObject.showTier].background
        if bmode ~= nill then
          colormode = bmode
          bmode = background[bmode]
        end
        if bmode == nill then
          colormode = 1
          bmode = background[1]
        end

        bhtml = bhtml..optionColorButton(colormode, bmode.color, bmode.color, screenObject.background, y)
        bhtml = bhtml..optionColorButton("Reset", "ff0000", "ff0000", screenObject.resetButton, y)
        bhtml = bhtml..optionColorButton("+", "9A947C", nill, screenObject.applyToAll, y)
        bhtml = bhtml..[[<rect fill="#9A947C" height="]]..(screenObject.button.size)..[[" width="]]..(screenObject.button.size)..[[" y="]]..(y)..[[" x="]]..(screenObject.button.x)..[["/>]]
        bhtml = bhtml..optionColorButton("R", "9A947C", nill, screenObject.button, y)

      else
        bhtml = bhtml..[[<rect fill="#585857" fill-opacity="0.5" height="]]..(screenObject.settingsButton.size)..[[" width="]]..(screenObject.settingsButton.size+20)..[[" y="0" x="0"/>]]
      end

      bhtml = bhtml..[[<text class ="FSBM" fill-opacity="0.7" x="]]..math.floor(screenObject.settingsButton.x+(screenObject.settingsButton.size/2))..[[" y="]]..math.floor(screenObject.settingsButton.y+screenObject.settingsButton.size-10)..[[">></text>]]


      if screenObject.backgroundContentId == nill then
        screenObject.backgroundContentId = screenObject.screen.addContent(0, 0, bhtml)
      else
        screenObject.screen.resetContent(screenObject.backgroundContentId, bhtml)
      end
      screenObject.settings.generatebackground = false
    end


    if screenObject.oreContentId == nill then
      screenObject.oreContentId = screenObject.screen.addContent(0, 0, html)
    else
      screenObject.screen.resetContent(screenObject.oreContentId, html)
    end



    thtml = [[<svg width="100vw" height="100vh" viewBox="0 0 ]]..screenWidth..[[ ]]..screenHeight..[[" xmlns="http://www.w3.org/2000/svg">]]

    if counter % 2 == 0 then
      thtml = thtml..[[<circle cx="99%" cy="99%" r="0.5%" style="fill:#47a156; fill-opacity:0.8;"></circle>]]
    else
      thtml = thtml..[[<circle cx="99%" cy="99%" r="0.5%" style="fill:#47a156; fill-opacity:0.3;"></circle>]]
    end

    thtml =  thtml..[[</svg>]]

    if screenObject.tickContentId == nill then
      screenObject.tickContentId = screenObject.screen.addContent(0, 0, thtml)
    else
      screenObject.screen.resetContent(screenObject.tickContentId, thtml)
    end

  end
end
for _,screenObject in ipairs(screens) do
  screenObject.screen.clear()
end
--generateHtml()
unit.setTimer('updateTable', 1)
